package com.example.receiptApp.pages.graphs

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import androidx.viewbinding.ViewBinding
import com.example.receiptApp.R
import com.example.receiptApp.databinding.GraphsCakeCardBinding
import com.example.receiptApp.databinding.GraphsHistogramCardBinding


class GraphAdapter: ListAdapter<GraphsDataModel, GraphAdapter.GraphViewHolder>(GraphDiffCallback()) {

    /**
     * for areItemsTheSame i use  the id, that NEED to be unique
     * for areContentsTheSame i use the equals method generated by the data class
     */
    class GraphDiffCallback : DiffUtil.ItemCallback<GraphsDataModel>()
    {
        override fun areItemsTheSame(oldItem: GraphsDataModel, newItem: GraphsDataModel): Boolean
        {
            return oldItem.id == newItem.id
        }

        override fun areContentsTheSame(oldItem: GraphsDataModel, newItem: GraphsDataModel): Boolean
        {
            //NOTA: valid in this case only because all elements don't change.
            return oldItem.id == newItem.id
        }
    }

    /**
     * the View holder, this class have two child, one for every view type i need to use
     *
     * @constructor
     *
     * @param binding the view binding
     */
    sealed class GraphViewHolder(binding: ViewBinding) :
        RecyclerView.ViewHolder(binding.root)
    {
        /**
         * view holder of the block relative to the aggregate data
         *
         * @property binding
         * @constructor
         */
        class HistogramViewHolder(
            private val binding: GraphsHistogramCardBinding
            ) : GraphViewHolder(binding)
        {
            // the callbacks need to be in the init section
            init
            {
                // eventualy initial setup on the layout

            }

            fun bind(histogram: GraphsDataModel.Histogram)
            {
                with(binding)
                {
                    /**
                     * Load inside the card layout what is inside
                     * the Histogram object passed
                     */
                    // graph binding
                    textView.text = histogram.name
                    aaChartView.aa_drawChartWithChartModel(histogram.aaChartModel)
                }
            }
        }

        class CakeViewHolder(
            private val binding: GraphsCakeCardBinding,
        ) : GraphViewHolder(binding)
        {
            init
            {
                // eventualy initial setup on the layout

            }

            fun bind(cake: GraphsDataModel.Cake)
            {
                with(binding)
                {
                    /**
                     * Load inside the card layout what is inside
                     * the cake graph object passed
                     */
                    textView.text = cake.name
                    aaChartView.aa_drawChartWithChartModel(cake.aaChartModel)
                }
            }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): GraphViewHolder
    {
        // depending on the view type i return the corresponding holder
        return when (viewType)
        {
            R.layout.graphs_histogram_card -> GraphViewHolder.HistogramViewHolder(
                // this is the binding!
                GraphsHistogramCardBinding.inflate(
                    LayoutInflater.from(parent.context),
                    parent,
                    false
                )
            )
            R.layout.graphs_cake_card -> GraphViewHolder.CakeViewHolder(
                // this is the binding!
                GraphsCakeCardBinding.inflate(
                    LayoutInflater.from(parent.context),
                    parent,
                    false
                )
            )

            // the else case is needed, but should never be called
            else -> throw IllegalStateException("the view type in the RecyclerView is wrongggg! ")
        }
    }

    override fun onBindViewHolder(holder: GraphViewHolder, position: Int)
    {
        // depending on the type of the holder i need to bind the corresponding view
        when (holder)
        {
            is GraphViewHolder.HistogramViewHolder -> holder.bind(getItem(position) as GraphsDataModel.Histogram)
            is GraphViewHolder.CakeViewHolder -> holder.bind(getItem(position) as GraphsDataModel.Cake)
        }
    }

    /**
     * this is needed to let the recyclerview know the relation between holder and layout
     *
     * TODO: here should be specified particular layout for each type of graph
     *
     * @param position
     * @return -> the layout that need to inflated in the position
     */
    override fun getItemViewType(position: Int): Int
    {
        return when (getItem(position))
        {
            is GraphsDataModel.Histogram -> R.layout.graphs_histogram_card
            is GraphsDataModel.Cake -> R.layout.graphs_cake_card
            is GraphsDataModel.Label -> R.layout.graphs_cake_card // TODO: va creato il layout label
        }
    }
}
