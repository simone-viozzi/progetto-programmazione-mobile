package com.example.receiptApp.pages.archive

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import androidx.viewbinding.ViewBinding
import com.example.receiptApp.databinding.AddHeadBinding
import com.example.receiptApp.databinding.AddSingleElementBinding
import com.example.receiptApp.databinding.ArchiveAggregateBinding
import com.example.receiptApp.pages.add.AddDataModel
import com.example.receiptApp.pages.add.adapters.AddAdapter
import com.example.receiptApp.round
import android.R

import android.graphics.BitmapFactory

import android.graphics.Bitmap




class ArchiveAdapter(

) : ListAdapter<ArchiveDataModel, ArchiveAdapter.ArchiveViewHolder>(ArchiveAdapter.ArchiveDiffCallback()){

    /**
     * for areItemsTheSame i use  the id, that NEED to be unique
     * for areContentsTheSame i use the equals method generated by the data class
     */
    class ArchiveDiffCallback : DiffUtil.ItemCallback<ArchiveDataModel>()
    {
        override fun areItemsTheSame(oldItem: ArchiveDataModel, newItem: ArchiveDataModel): Boolean
        {
            if (oldItem is ArchiveDataModel.Aggregate && newItem is ArchiveDataModel.Aggregate)
            {
                return oldItem.id == newItem.id
            }
            if (oldItem is ArchiveDataModel.Element && newItem is ArchiveDataModel.Element)
            {
                return oldItem.id == newItem.id
            }
            return false
        }

        override fun areContentsTheSame(oldItem: ArchiveDataModel, newItem: ArchiveDataModel): Boolean
        {
            if (oldItem is ArchiveDataModel.Aggregate && newItem is ArchiveDataModel.Aggregate)
            {
                return oldItem == newItem
            }
            if (oldItem is ArchiveDataModel.Element && newItem is ArchiveDataModel.Element)
            {
                return oldItem == newItem
            }
            return false
        }
    }

    //
    sealed class ArchiveViewHolder(
        binding: ViewBinding
    ) : RecyclerView.ViewHolder(binding.root)
    {
        class AggregateViewHolder(
            private val binding: ArchiveAggregateBinding
        ): ArchiveViewHolder(binding) {
            // the callbacks need to be in the init section
            init {

            }

            fun bind(aggregate: ArchiveDataModel.Aggregate) {
                with(binding){
                    tagTextView.text = aggregate.tag
                    dateTextView.text = aggregate.str_date
                    costTextView.text = aggregate.tot_cost?.round(2).toString() + "â‚¬"
                    aggregate.thumbnail?.let{
                        imageAttachment.setImageBitmap(it)
                    }
                }
            }
        }
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ArchiveViewHolder
    {
        // depending on the view type i return the corresponding holder
        return when (viewType)
        {
            com.example.receiptApp.R.layout.archive_aggregate -> ArchiveViewHolder.AggregateViewHolder(
                // this is the binding!
                ArchiveAggregateBinding.inflate(
                    LayoutInflater.from(parent.context),
                    parent,
                    false
                )
            )
            // the else case is needed, but should never be called
            else -> throw IllegalStateException("the view type in the RecyclerView is wrongggg! ")
        }
    }


    override fun onBindViewHolder(holder: ArchiveViewHolder, position: Int)
    {
        // depending on the type of the holder i need to bind the corresponding view
        when (holder)
        {
            is ArchiveViewHolder.AggregateViewHolder -> holder.bind(getItem(position) as ArchiveDataModel.Aggregate)
        }
    }

    /**
     * this is needed to let the recyclerview know the relation between holder and layout
     *
     * @param position
     * @return -> the layout that need to inflated in the position
     */
    override fun getItemViewType(position: Int): Int
    {
        return when (getItem(position))
        {
            is ArchiveDataModel.Aggregate -> com.example.receiptApp.R.layout.archive_aggregate
            else -> throw IllegalStateException("only ArchiveDataModel.Aggregate item expected, something goes wrong.")
        }
    }
}