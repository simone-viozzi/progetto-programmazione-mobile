package com.example.roomdbtest

import android.graphics.Color
import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.example.roomdbtest.databinding.RvSingleItemBinding
import com.example.roomdbtest.db.MyColor


class ColorListAdapter(): ListAdapter<MyColor, ColorListAdapter.ColorViewHolder>(ColorDiffCallback())
{
    // the on click callback function
    var onItemClick: ((MyColor) -> Unit)? = null


    /**
     * Color view holder with the view binding
     *
     * @property binding
     * @constructor Create empty Color view holder
     */
    class ColorViewHolder private constructor(val binding: RvSingleItemBinding) : RecyclerView.ViewHolder(binding.root)
    {
        companion object {
            fun from(parent: ViewGroup): ColorViewHolder {
                val layoutInflater = LayoutInflater.from(parent.context)

                // the RvSingleItemBinding is autogenerated
                val binding = RvSingleItemBinding.inflate(layoutInflater, parent, false)
                return ColorViewHolder(binding)
            }
        }
    }

    /**
     * Color diff callback, this is needed because the recyclerview need to tell if  two items are
     * the same, or content is same
     *
     * @constructor Create empty Color diff callback
     */
    class ColorDiffCallback: DiffUtil.ItemCallback<MyColor>()
    {
        override fun areItemsTheSame(oldItem: MyColor, newItem: MyColor): Boolean
        {
            // DO NOT USE "oldItem === newItem", the list returned from the live data is always different
            return oldItem.id == newItem.id
        }

        override fun areContentsTheSame(oldItem: MyColor, newItem: MyColor): Boolean
        {
            return (oldItem.red == newItem.red) &&
                    (oldItem.green == newItem.green) &&
                    (oldItem.blue == newItem.blue)
        }

    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ColorViewHolder
    {
        return ColorViewHolder.from(parent)
    }

    override fun onBindViewHolder(holder: ColorViewHolder, position: Int)
    {
        // with getItem i get an item of the recyclerview internal list
        val c = getItem(position)

        // using the binding in the holder i can populate the views
        holder.binding.textView.text = c.generateHex()
        holder.binding.imageView.setBackgroundColor(Color.rgb(c.red, c.green, c.blue))

        // and set the click listener
        holder.binding.singleElement.setOnClickListener {
            if (position != RecyclerView.NO_POSITION)
            {
                // using invoke i call the callback and pass the corresponding color
                onItemClick?.invoke(c)
            }
        }

    }

}